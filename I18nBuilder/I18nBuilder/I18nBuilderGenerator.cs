using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.Text;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Text.Json;

namespace I18nBuilder
{


    [Generator(LanguageNames.CSharp)]
    public class I18nBuilderGenerator : ISourceGenerator
    {

        public void Initialize(GeneratorInitializationContext context)
        {
            // デバッグ用: ソースジェネレーターの起動を確認
            ///デバッグ
            if (!Debugger.IsAttached)
            {
                Debugger.Launch();
            }
        }

        public void Execute(GeneratorExecutionContext context)
        {
            // テストプロジェクトの名前空間を取得枠
            string projectNamespace = context.Compilation.AssemblyName ?? "I18nBuilderGenerator";

            // MSGLibTest プロジェクト直下の i18n ディレクトリを探索
            string? projectDir = GetProjectDirectory(context);
            if (projectDir == null) return;

            string i18nPath = Path.Combine(projectDir, "i18n");
            if (!Directory.Exists(i18nPath)) return;
            
            foreach (var jsonFile in Directory.GetFiles(i18nPath, "*.json"))
            {
                string fileName = Path.GetFileNameWithoutExtension(jsonFile);
                string className = ToValidClassName(fileName);
                string generatedCode = GenerateClassCode(projectNamespace, className, jsonFile);
                context.AddSource($"{className}.g.cs", SourceText.From(generatedCode, Encoding.UTF8));
            }
        }

        private static string? GetProjectDirectory(GeneratorExecutionContext context)
        {
            if (context.AnalyzerConfigOptions.GlobalOptions.TryGetValue("build_property.ProjectDir", out var projectDir))
            {
                return projectDir;
            }
            return null;
        }

        private static string ToValidClassName(string fileName)
        {
            return SyntaxFacts.IsValidIdentifier(fileName) ? fileName : $"Msg_{fileName}";
        }

        private void FileRead(string jsonFilePath)
        {
            if(!File.Exists(jsonFilePath)) return;
            using var streamReder = new StreamReader(jsonFilePath, Encoding.UTF8);
            var buffer= streamReder.ReadToEnd();
            var jsonBuilder=JsonDocument.Parse(buffer);
            var languages = jsonBuilder.RootElement.EnumerateObject().Select(t => t.Name);

        }

        private static string GenerateClassCode(string namespaceName, string className, string jsonFilePath)
        {
            var jsonContent = File.ReadAllText(jsonFilePath);
            var properties = JsonSerializer.Deserialize<Dictionary<string, string>>(jsonContent);
            if (properties == null) return string.Empty;

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated/>");
            sb.AppendLine("using System.Collections.Generic;");
            sb.AppendLine("namespace " + namespaceName + " {");
            sb.AppendLine($"    public static partial class {className} {{");
            foreach (var kvp in properties)
            {
                string propertyName = ToValidClassName(kvp.Key);
                sb.AppendLine($"        public static string {propertyName} => \"{kvp.Value}\";");
            }
            sb.AppendLine("    }");
            sb.AppendLine("}");
            return sb.ToString();
        }
    }

}
